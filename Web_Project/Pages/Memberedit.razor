@page "/memberedit"

@using DataAccess.Data
@using Web_Project.DataModels

@inject MemberData _db
@inject IMatDialogService MatDialogService

<h1>Memberedit</h1>
<MatButton Icon="note_add" OnClick="@OpenAddDialog">Add new product</MatButton>
	<MatDialog @bind-IsOpen="@dialogAddIsOpen">
		<MatDialogContent>
			<p>Insert Member</p>
				<MatTextField Label="First Name" @bind-Value="@newmember.FirstName"></MatTextField>
				<MatTextField Label="LastName" @bind-Value="@newmember.LastName"></MatTextField>
				<MatTextField Label="Email" @bind-Value="@newmember.Email"></MatTextField>
				<MatSelectValue @bind-Value="@newmember.Role" Items="@memberRoles" ValueSelector=@(i=>i.ToString())></MatSelectValue>
		</MatDialogContent>
		<MatDialogActions>
			<MatButton OnClick="@(e => { dialogAddIsOpen = false; })">Cancel</MatButton>
			<MatButton OnClick="@(_ => InsertMember())">Insert</MatButton>
		</MatDialogActions>
	</MatDialog>
<h3>Current Member</h3>
@if (members is null)
{
	<p><em>Loading...</em></p>
}
else
{
	<table class="table table-striped">
		<thead>
			<tr>
				<th>Member Id</th>
				<th>First Name</th>
				<th>Last Name</th>
				<th>Email</th>
				<th>Role</th>
				<th>Actions</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var member in members)
			{
			<tr>
				<td>@member.MemberId</td>
				<td>@member.FirstName</td>
				<td>@member.LastName</td>
				<td>@member.Email</td>
				<td>@member.Role</td>
				<td>
					<MatIconButton Icon="build"></MatIconButton>
					<MatDialog @bind-IsOpen="@dialogEditIsOpen">
						<MatDialogTitle>Hi</MatDialogTitle>
							<MatDialogContent>
								<p>Edit Product</p>
									<MatTextField Label="Member ID" @bind-Value="@member.MemberId"></MatTextField>
									<MatTextField Label="First Name" @bind-Value="@member.FirstName"></MatTextField>
									<MatTextField Label="LastName" @bind-Value="@member.LastName"></MatTextField>
									<MatTextField Label="Email" @bind-Value="@member.Email"></MatTextField>
									<MatSelectValue @bind-Value="@member.Role" Items="@memberRoles" ValueSelector=@(i=>i.ToString())></MatSelectValue>
							</MatDialogContent>
							<MatDialogActions>
									<MatButton OnClick="@(e => { dialogEditIsOpen = false; })">Cancel</MatButton>
									<MatButton OnClick="@OkClick">Save</MatButton>
							</MatDialogActions>
					</MatDialog>
					<MatIconButton Icon="delete"></MatIconButton>
				</td>
			</tr>
		}
		</tbody>
	</table>
}

@code {
	bool dialogAddIsOpen = false;
	bool dialogEditIsOpen = false;
	private List<Member> members;

	private Member newmember = new Member();

	protected override async Task OnInitializedAsync()
	{
		members = await _db.GetMember();
	}

	protected async Task GetMemberById(int Id)
	{
		await _db.GetMemberById(Id);
		dialogEditIsOpen = true;
	}

	private async Task InsertMember()
	{
		var newMember = new Member();
		dialogAddIsOpen = false;
		await _db.InsertMember(newmember);

		Rerender();
	}

	private async Task DeleteMember(int Id)
	{
		//await _db.DeleteProduct(Id);

		//Rerender();
	}

	private async Task UpdateMember(Member member)
	{
		await _db.UpdateMember(member);
		dialogEditIsOpen = false;

		Rerender();
	}

	void OkClick()
	{
		dialogEditIsOpen = false;
		Rerender();
	}

	void OpenAddDialog()
	{
		dialogAddIsOpen = true;
	}

	void OpenEditDialog()
	{
		dialogEditIsOpen = true;
	}

	string[] memberRoles = new[]
            {
                "admin",
                "user",
            };

	private async Task Rerender()
    {
        members = await _db.GetMember();
    }
}
