@page "/productedit"

@using DataAccess.Data
@using Web_Project.DataModels
@using Microsoft.AspNetCore.Components

@inject AuthenticationStateProvider authStateProvider
@inject ProductData _db
@inject IMatDialogService MatDialogService

<AuthorizeView Roles="Administrator">
	<Authorized>
<h1>Product Edit</h1>
<MatButton Icon="note_add" OnClick="@OpenAddDialog">Add new product</MatButton>
<h2>Current Product</h2>
	<MatDialog @bind-IsOpen="@dialogAddIsOpen">
		<MatDialogContent>
			<p>Insert Product</p>
				<MatTextField Label="Product Image" @bind-Value="@newproduct.ProductImg"></MatTextField>
				<MatTextField Label="Product Name" @bind-Value="@newproduct.ProductName"></MatTextField>
				<MatTextField Label="Product Description"@bind-Value="@newproduct.ProductDesc"></MatTextField>
				<MatTextField Label="Product Price"@bind-Value="@newproduct.ProductPrice"></MatTextField>
		</MatDialogContent>
		<MatDialogActions>
			<MatButton OnClick="@(e => { dialogAddIsOpen = false; })">Cancel</MatButton>
			<MatButton OnClick="@(_ => InsertProduct())">Insert</MatButton>
		</MatDialogActions>
	</MatDialog>
@if (products is null)
{
	<p><em>Loading...</em></p>
}
else
{
	<table class="table table-striped">
		<thead>
			<tr>
				<th>Product Image</th>
				<th>Product Name</th>
				<th>Product Description</th>
				<th>Product Price</th>
				<th>Actions</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var product in products)
			{
			<tr>
				<td>@product.ProductImg</td>
				<td>@product.ProductName</td>
				<td>@product.ProductDesc</td>
				<td>@string.Format("฿{0:f2}",@product.ProductPrice)</td>
				<td>
					<MatIconButton Icon="build" @bind-value="@product.ProductId" @onclick="() => GetProductById(product.ProductId)"></MatIconButton>
					<MatDialog @bind-IsOpen="@dialogEditIsOpen">
						<MatDialogTitle>Edit Product</MatDialogTitle>
							<MatDialogContent>
								<p>Edit Product</p>
									<MatTextField Label="Product Image"@bind-Value="@product.ProductImg"></MatTextField>
									<MatTextField Label="Product Name" @bind-Value="@product.ProductName"></MatTextField>
									<MatTextField Label="Product Description"@bind-Value="@product.ProductDesc"></MatTextField>
									<MatTextField Label="Product Price"@bind-Value="@product.ProductPrice"></MatTextField>
							</MatDialogContent>
							<MatDialogActions>
									<MatButton OnClick="@OkClick">Cancel</MatButton>
									<MatButton @onclick="() => UpdateProduct(product)">Save</MatButton>
							</MatDialogActions>
					</MatDialog>
					<MatIconButton Icon="delete" @bind-value="@product.ProductId" @onclick="() => OpenDelDialog()"></MatIconButton>
					<MatDialog @bind-IsOpen="@dialogDelIsOpen">
						<MatDialogTitle>Confirm Delete</MatDialogTitle>
							<MatDialogActions>
									<MatButton OnClick="@(e => { dialogDelIsOpen = false; })">Cancel</MatButton>
									<MatButton @onclick="() => DeleteProduct(product.ProductId)">Confirm</MatButton>
							</MatDialogActions>
					</MatDialog>
				</td>
			</tr>
		    }
		</tbody>
	</table>
}
	</Authorized>
</AuthorizeView>
@code {
	bool dialogAddIsOpen = false;
	bool dialogEditIsOpen = false;
	bool dialogDelIsOpen = false;
	private List<Product> products;

	private Product newproduct = new Product();

	protected override async Task OnInitializedAsync()
	{
		products = await _db.GetProduct();
	}
	private async Task GetProductById(int ProductId)
	{
		products = await _db.GetProductById(ProductId);
		dialogEditIsOpen = true;
	}

	private async Task InsertProduct()
	{
		var newProduct = new Product();
		dialogAddIsOpen = false;
		await _db.InsertProduct(newproduct);

		Rerender();
	}

	private async Task DeleteProduct(int Id)
	{
		await _db.DeleteProduct(Id);
		dialogDelIsOpen = false;

		Rerender();
	}

	private async Task UpdateProduct(Product product)
	{
		await _db.UpdateProduct(product);
		dialogEditIsOpen = false;

		Rerender();
	}

	void OkClick()
	{
		dialogEditIsOpen = false;

		Rerender();
	}

	void OpenAddDialog()
	{
		dialogAddIsOpen = true;
	}

	void OpenEditDialog()
	{
		dialogEditIsOpen = true;
	}

	void OpenDelDialog()
	{
		dialogDelIsOpen = true;
	}

	private async Task Rerender()
    {
        products = await _db.GetProduct();
    }
}
